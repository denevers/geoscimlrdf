Use GeoSparql ontology for Feature : http://schemas.opengis.net/geosparql/1.0/
Did not model Geologic Time since it has been done by Simon already
Did not model "collection".  RDF already has classes for this (bag, list, etc..)
Borehole on hold
Analysis is O&M heavy - need a good O&M encoding (or SOSA ?)
	in the mean time, use seegrid O&M ontology. http://def.seegrid.csiro.au/static/isotc211/iso19156/2011/
	This ontology brings a "AnyFeature" which duplicates GeoSparql Feature.  I made GeologicUnit and MappedUnit child of both

Properties.
For now, all properties that refers to "vocabularies" are just routed to "owl:Thing" instead of SKOS.  To be discussed
linked to "skos:Concept" implies that all vocabularies are references to resources that are "rdf:type skos:Concept" - maybe 
this is the intent ?



== Association Class ==
AssociationClass , such as relatedFeature.  3 ways to model this.

Model it as it is in UML (with a middle class)

a:Unit1 gsml:relatedFeature a:GeologicRelation1.
a:GeologicRelation1 gsml:relatedFeature a:Unit2.
a:GeologicRelation1 a gsml:GeologicRelation; gsml:role <http://foo.com/def/roles/member>.

bit of an issue that gsml:relatedFeature is actually two properties (GeologicFeature->GeologicRelation and GeologicRelation->GeologicFeature) but I guess
we can live with relatedFeature to be a single owl:SymmetricProperty (GeologicFeature <-> GeologicRelation).  We can also constrain blah blah

One way to model complex Association Class (such as AbstractFeatureRelation) is to reify the relatedFeature property.

a:Unit1 gsml:relatedFeature a:Unit2.

_:b a rdf:Statement;
  rdf:subject a:Unit1;
  rdf:predicate gsml:relatedFeature;
  rdf:object a:Unit2;
  gsml:role <http://foo.com/def/roles/member>. 

Some people consider this too complex.  

There is another pattern, such as Singleton  - you create an "instance" of the property.

a:Unit1 a:myRelatedFeature1 a:Unit2.

a:myRelatedFeature singletonPropertyOf  gsml:GeologicRelation;
	gsml:role <http://foo.com/def/roles/member>.

Skipped GeologicRelation and MaterialRelation until pattern is decided
-----

GeologicFeature::classifier is a potential "soft-type" for any GeologicFeature.  For example, for GeologicUnit, one could create sub types for specific units 
from a lexicon (ie, "Trenton Group") instead of treating it as a instance (what IGS has done for RockMaterial...)
	
GeologicUnit:geologicUnitType is definitively a soft type.

role: we have several "role".  Are they the same property with different constrains, or different properties.  I choose to use the 
constrain routed
proportion: idem. But in this case we can argue it's the same property

EarthMaterial::color what's the benefit of SWE::Category over regular vocabulary again ? (proportion ? dominant grey, some black ?)

Contact::contactType : soft typing
Foliation::foliationType : soft typing
ShearDisplacementStructure::faultType soft typing
NaturalGeomorphologicFeature::naturalGeomorphologicFeatureType soft type
AnthropogenicGeomorphologicFeature::anthropogenicGeomorphologicFeatureType soft type


Did not model GSML_QuantityRange as it's just an artefact to deal with FES limitations.
In fact, in should not be in the conceptual model at all, this should be resolved using WFS stored procedure because
it's a WFS/FES issue.



CORRECTION TO SPEC 
- 8.4.1.5.3    Material 
	Material should be lower case (it's a property)



